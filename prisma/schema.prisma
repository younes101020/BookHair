// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastname      String?
  role          Role      @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  phone         String? 
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations      Reservation[]
  commentaires      Commentaire[]

  @@map("Client")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coiffeur {
  id                String           @id @default(uuid())
  nom               String
  role              Role             @default(USER)
  email             String           @unique
  mot_de_passe      String?
  numero_telephone  String           @unique
  adresse           String
  date_creation     DateTime         @default(now())
  date_modification DateTime?        @updatedAt
  servicedetails    ServiceDetails[]
  commentaires      Commentaire[]
}

model Service {
  id                String           @id @default(uuid())
  nom               String
  description       String
  duree             Int
  date_creation     DateTime         @default(now())
  date_modification DateTime?        @updatedAt
  servicedetails    ServiceDetails[]
}

model ServiceDetails {
  id                String        @id @default(uuid())
  prix              Float
  coupe_id          String
  coiffeur_id       String
  service_id        String
  date_creation     DateTime      @default(now())
  date_modification DateTime?     @updatedAt
  coupe             Coupe?
  coiffeur          Coiffeur      @relation(fields: [coiffeur_id], references: [id])
  service           Service       @relation(fields: [service_id], references: [id])
  reservations      Reservation[]
}

model Coupe {
  id                String        @id @default(uuid())
  categorie         Categorie
  name              String
  servicedetails    ServiceDetails? @relation(fields: [sdId], references: [id])
  sdId              String        @unique
}

model Reservation {
  id                 String         @id @default(uuid())
  date_reserv        DateTime
  user_id            String
  service_details_id String
  date_creation      DateTime       @default(now())
  date_modification  DateTime?      @updatedAt
  user               User         @relation(fields: [user_id], references: [id])
  serviceDetails     ServiceDetails @relation(fields: [service_details_id], references: [id])
}

model Commentaire {
  id                String    @id @default(uuid())
  commentaire       String
  note              Int
  date_com          DateTime
  user_id         String
  coiffeur_id       String
  date_creation     DateTime  @default(now())
  date_modification DateTime? @updatedAt
  user              User    @relation(fields: [user_id], references: [id])
  coiffeur          Coiffeur  @relation(fields: [coiffeur_id], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Categorie {
  CHEVEUX
  BARBE
  VISAGE
}